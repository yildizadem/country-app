{"version":3,"sources":["components/AppBar.js","components/GraphTable/Pagination.js","components/GraphTable/Table.js","components/GraphTable/index.js","App.js","reportWebVitals.js","index.js"],"names":["AppBar","darkMode","setDarkMode","position","variant","color","Toolbar","Typography","style","flexGrow","IconButton","onClick","Brightness7","Brightness4","useStyle","makeStyles","theme","root","display","alignItems","padding","spacing","flexWrap","select","marginRight","breakpoints","down","Pagination","gotoPage","pageOptions","setPageSize","state","pageIndex","pageSize","classes","className","count","length","onChange","e","value","NativeSelect","Number","target","map","row","transition","cursor","detailItem","Table","data","columns","hideOnMainTable","useTable","initialState","hiddenColumns","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","paginationOptions","useState","detailIsOpen","setDetailIsOpen","detailData","setDetailData","useEffect","Fragment","TableHead","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","getHeaderProps","render","TableBody","i","console","log","hover","getRowProps","cells","cell","getCellProps","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","Divider","allCells","Header","DialogActions","Button","GraphTable","queryAll","entityName","title","details","useQuery","loading","error","useTheme","LinearProgress","Paper","margin","settings","accessor","languages","lang","name","code","gql","client","ApolloClient","uri","process","cache","InMemoryCache","App","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","palette","type","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db07da6c.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar as MuiAppBar, Toolbar, Typography, IconButton } from '@material-ui/core';\nimport { Brightness4, Brightness7 } from '@material-ui/icons';\n\nfunction AppBar({ darkMode, setDarkMode }) {\n    return (\n        <MuiAppBar\n            position=\"static\"\n            variant=\"elevation\"\n            color=\"default\"\n        >\n            <Toolbar variant=\"regular\">\n                <Typography variant=\"h6\" color=\"inherit\" style={{ flexGrow: 1 }}>\n                    CountryApp\n          </Typography>\n                <IconButton\n                    onClick={() => setDarkMode(!darkMode)}\n                >\n                    {\n                        darkMode\n                            ? <Brightness7 />\n                            : <Brightness4 />\n                    }\n                </IconButton>\n            </Toolbar>\n        </MuiAppBar>\n    )\n}\n\nexport default AppBar;\n","import React from 'react';\nimport { NativeSelect, makeStyles } from '@material-ui/core';\nimport { Pagination as MuiPagination } from '@material-ui/lab';\n\nfunction Pagination({ gotoPage, pageOptions, setPageSize, state: { pageIndex, pageSize } }) {\n    const classes = useStyle();\n    return (\n        <div className={classes.root}>\n            <MuiPagination\n                color=\"secondary\"\n                count={pageOptions.length}\n                onChange={(e, value) => gotoPage(value - 1)}\n                style={{ flexGrow: 1 }}\n            />\n            <NativeSelect\n                className={classes.select}\n                value={pageSize}\n                onChange={e => {\n                    setPageSize(Number(e.target.value))\n                }}\n            >\n                {[10, 20, 30, 40, 50].map(pageSize => (\n                    <option key={pageSize} value={pageSize}>\n                        Show {pageSize}\n                    </option>\n                ))}\n            </NativeSelect>\n            <span>Page <strong>{pageIndex + 1}</strong> of <strong>{pageOptions.length}</strong></span>\n        </div>\n    )\n}\n\nconst useStyle = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: theme.spacing(3),\n        flexWrap: 'wrap'\n    },\n    select: {\n        marginRight: theme.spacing(4),\n        [theme.breakpoints.down('xs')]: {\n            marginRight: 'auto'\n        }\n    }\n}))\n\nexport default Pagination;\n","import React, { useState, useEffect } from 'react';\nimport {\n    Table as MuiTable, TableBody, TableCell, TableHead, TableRow, makeStyles,\n    Dialog, DialogActions, DialogTitle, DialogContent, Button, Divider, Typography\n} from '@material-ui/core';\nimport { useTable, usePagination } from 'react-table';\nimport Pagination from './Pagination';\n\nfunction Table({ data, columns, hideOnMainTable }) {\n    const classes = useStyle();\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        page,\n        ...paginationOptions\n    } = useTable({\n        columns,\n        data,\n        initialState: {\n            pageSize: 10,\n            pageIndex: 0,\n            hiddenColumns: hideOnMainTable\n        }\n    }, usePagination);\n    const [detailIsOpen, setDetailIsOpen] = useState(false);\n    const [detailData, setDetailData] = useState(null);\n\n    useEffect(() => (detailData && setDetailIsOpen(true)), [detailData])\n\n    return (\n        <React.Fragment>\n            <MuiTable {...getTableProps()}>\n                <TableHead>\n                    {headerGroups.map(headerGroup => (\n                        <TableRow {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <TableCell {...column.getHeaderProps()}>\n                                    {column.render('Header')}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                </TableHead>\n                <TableBody {...getTableBodyProps()}>\n                    {page.map((row, i) => {\n                        prepareRow(row)\n                        console.log(row);\n                        return (\n                            <TableRow\n                                onClick={() => setDetailData(row)}\n                                hover={true}\n                                {...row.getRowProps()}\n                                className={classes.row}\n                            >\n                                {row.cells.map(cell => {\n                                    return (\n                                        <TableCell {...cell.getCellProps()}>\n                                            {cell.render('Cell')}\n                                        </TableCell>\n                                    )\n                                })}\n                            </TableRow>\n                        )\n                    })}\n                </TableBody>\n            </MuiTable>\n            <Pagination\n                {...paginationOptions}\n            />\n            <Dialog\n                open={detailIsOpen}\n                onClose={() => setDetailIsOpen(false)}\n                fullWidth\n                maxWidth=\"sm\"\n            >\n                <DialogTitle>Detail</DialogTitle>\n                <DialogContent>\n                    <Divider />\n                    {detailData && detailData.allCells.map(cell => (\n                        <div className={classes.detailItem}>\n                            <h3>\n                                {cell.column.Header} :\n                            </h3>\n                            <Typography variant=\"body2\">\n                                {cell.render('Cell')}\n                            </Typography>\n                        </div>\n                    ))}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setDetailIsOpen(false)} color=\"primary\">\n                        Cancel\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    )\n}\n\n\n\nconst useStyle = makeStyles(theme => {\n    return {\n        row: {\n            '&:hover': {\n                transition: '300ms',\n                cursor: 'pointer'\n            }\n        },\n        detailItem: {\n\n        }\n    }\n})\n\nexport default Table;\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport {\n    LinearProgress, Toolbar, Divider, Paper, useTheme\n} from '@material-ui/core';\nimport Table from './Table';\n\nfunction GraphTable({ queryAll, entityName, columns, hideOnMainTable = [], title = '', details = false }) {\n    const { loading, error, data } = useQuery(queryAll);\n    const theme = useTheme();\n\n    return (\n        loading || error\n            ? <LinearProgress />\n            : (\n                <Paper variant=\"outlined\" style={{ margin: theme.spacing(3) }}>\n                    <Toolbar>\n                        <h3>{title}</h3>\n                    </Toolbar>\n                    <Divider />\n                    <Table columns={columns} data={data[entityName]} hideOnMainTable={hideOnMainTable} />\n                </Paper>\n            )\n    )\n}\n\nexport default GraphTable;\n","import React, { useEffect, useState, useMemo } from 'react';\nimport {\n  CssBaseline, useMediaQuery, ThemeProvider, createMuiTheme, Paper\n} from '@material-ui/core';\nimport { gql, InMemoryCache, ApolloClient, ApolloProvider } from '@apollo/client';\nimport { AppBar, GraphTable } from './components';\n\nconst settings = {\n  title: 'Countries',\n  entityName: 'countries',\n  columns: [\n    {\n      Header: 'Code',\n      accessor: 'code'\n    },\n    {\n      Header: 'Name',\n      accessor: 'name'\n    },\n    {\n      Header: 'Capital',\n      accessor: 'capital'\n    },\n    {\n      Header: 'Phone',\n      accessor: 'phone'\n    },\n    {\n      Header: 'Currency',\n      accessor: 'currency'\n    },\n    {\n      Header: 'Languages',\n      accessor: data => data.languages.map(lang => `${lang.name} (${lang.code})`)\n    },\n    {\n      Header: 'Emoji',\n      accessor: 'emoji'\n    }\n  ],\n  queryAll: gql`\n    query GetCountries {\n      countries {\n        code\n        name\n        phone\n        capital\n        currency\n        languages {\n          code\n          name\n        }\n        emoji\n      }\n    }\n  `,\n  details: true,\n  hideOnMainTable: ['capital', 'phone', 'Languages', 'currency']\n}\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_API_ROOT,\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const [darkMode, setDarkMode] = useState(true);\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: darkMode ? 'dark' : 'light',\n        },\n      }),\n    [darkMode]\n  );\n\n  useEffect(() => {\n    setDarkMode(prefersDarkMode)\n  }, [prefersDarkMode])\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar darkMode={darkMode} setDarkMode={setDarkMode} />\n\n      <ApolloProvider client={client}>\n        <GraphTable {...settings} />\n      </ApolloProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}